{"version":3,"sources":["logo.svg","utils/API.js","components/EmployeeTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","get","EmployeeTable","props","filterList","employeesList","filter","employee","name","first","toLowerCase","includes","search","last","class","scope","map","src","picture","thumbnail","cell","email","location","city","state","gender","App","employees","handleInputChange","event","setState","target","value","API","then","res","console","log","data","results","catch","err","className","this","onChange","type","placeholder","label","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,6LCE5B,EACM,WACjB,OAAOC,IAAMC,IAAI,iD,MC0CNC,MA3Cf,SAAuBC,GACrB,IAAMC,EAAaD,EAAME,cAAcC,QACrC,SAACC,GAAD,OACEA,EAASC,KAAKC,MAAMC,cAAcC,SAASR,EAAMS,OAAOF,gBACxDH,EAASC,KAAKK,KAAKH,cAAcC,SAASR,EAAMS,OAAOF,kBAG3D,OACE,2BAAOI,MAAM,SACX,2BAAOA,MAAM,eACX,4BACE,wBAAIC,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,YAGJ,+BAEGX,EAAWY,KAAI,SAACT,GAAD,OACd,4BACE,4BACG,IACD,yBAAKU,IAAKV,EAASW,QAAQC,aAE7B,4BAAKZ,EAASC,KAAKC,OACnB,4BAAKF,EAASC,KAAKK,MACnB,4BAAKN,EAASa,MACd,4BAAKb,EAASc,OACd,4BACGd,EAASe,SAASC,KADrB,KAC6BhB,EAASe,SAASE,OAE/C,4BAAKjB,EAASkB,eCUXC,E,4MAzCbF,MAAQ,CACNG,UAAW,GACXf,OAAQ,I,EAaVgB,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAAElB,OAAQiB,EAAME,OAAOC,S,kEAXlB,IAAD,OAClBC,IACGC,MAAK,SAACC,GACLC,QAAQC,IAAIF,GAEZ,EAAKL,SAAS,CAAEH,UAAWQ,EAAIG,KAAKC,aAErCC,OAAM,SAACC,GAAD,OAASL,QAAQC,IAAII,Q,+BAS9B,OACE,6BACE,kDACA,2BACEC,UAAU,QACVV,MAAOW,KAAKnB,MAAMZ,OAClBgC,SAAUD,KAAKf,kBACfiB,KAAK,OACLC,YAAY,cACZC,MAAM,oBAER,kBAAC,EAAD,CACE1C,cAAesC,KAAKnB,MAAMG,UAC1Bf,OAAQ+B,KAAKnB,MAAMZ,c,GAnCXoC,IAAMC,WCMJC,QACW,cAA7BC,OAAO7B,SAAS8B,UAEe,UAA7BD,OAAO7B,SAAS8B,UAEhBD,OAAO7B,SAAS8B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.fd69b764.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from \"axios\";\r\n\r\nexport default {\r\n  getRandomEmployee: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=50&nat=us\");\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction EmployeeTable(props) {\r\n  const filterList = props.employeesList.filter(\r\n    (employee) =>\r\n      employee.name.first.toLowerCase().includes(props.search.toLowerCase()) ||\r\n      employee.name.last.toLowerCase().includes(props.search.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <table class=\"table\">\r\n      <thead class=\"thead-light\">\r\n        <tr>\r\n          <th scope=\"col\">Image</th>\r\n          <th scope=\"col\">First</th>\r\n          <th scope=\"col\">Last</th>\r\n          <th scope=\"col\">Cell</th>\r\n          <th scope=\"col\">Email</th>\r\n          <th scope=\"col\">City, State</th>\r\n          <th scope=\"col\">Gender</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {/* only search for employees through the filtered list */}\r\n        {filterList.map((employee) => (\r\n          <tr>\r\n            <td>\r\n              {\" \"}\r\n              <img src={employee.picture.thumbnail} />\r\n            </td>\r\n            <td>{employee.name.first}</td>\r\n            <td>{employee.name.last}</td>\r\n            <td>{employee.cell}</td>\r\n            <td>{employee.email}</td>\r\n            <td>\r\n              {employee.location.city}, {employee.location.state}\r\n            </td>\r\n            <td>{employee.gender}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default EmployeeTable;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport API from \"./utils/API\";\nimport EmployeeTable from \"./components/EmployeeTable\";\n\nclass App extends React.Component {\n  state = {\n    employees: [],\n    search: \"\",\n  };\n  // function to generate api call\n  componentDidMount() {\n    API.getRandomEmployee()\n      .then((res) => {\n        console.log(res);\n        // setting state\n        this.setState({ employees: res.data.results });\n      })\n      .catch((err) => console.log(err));\n  }\n  // taking whatever is in the input box and saving it to state\n  handleInputChange = (event) => {\n    this.setState({ search: event.target.value });\n  };\n\n  // displaying the html\n  render() {\n    return (\n      <div>\n        <h1>Employee Directory</h1>\n        <input\n          className=\"input\"\n          value={this.state.search}\n          onChange={this.handleInputChange}\n          type=\"text\"\n          placeholder=\"search name\"\n          label=\"Employee Search\"\n        />\n        <EmployeeTable\n          employeesList={this.state.employees}\n          search={this.state.search}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}